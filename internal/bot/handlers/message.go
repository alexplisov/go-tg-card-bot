package handlers

import (
	"fmt"
	"strings"

	"github.com/alexplisov/go-tg-card-bot/internal/bot/conversations"
	"github.com/mymmrac/telego"
	"github.com/mymmrac/telego/telegohandler"
	"github.com/mymmrac/telego/telegoutil"
)

type MessageHandler struct {
	ownerChatID int64
	states      map[int64]*conversations.OrderConversationState
}

func NewMessageHandler(ownerChatID int64, states map[int64]*conversations.OrderConversationState) *MessageHandler {
	return &MessageHandler{
		ownerChatID: ownerChatID,
		states:      states,
	}
}

func (h *MessageHandler) Handle(ctx *telegohandler.Context, update telego.Update) error {
	state, ok := h.states[update.Message.From.ID]
	if !ok {
		return nil
	}
	switch state.OrderStep {
	case conversations.OrderStepName:
		if update.Message.Text != "" {
			state.OrderStep = conversations.OrderStepRequirements
			state.UserName = update.Message.Text
			if _, err := ctx.Bot().SendMessage(ctx, telegoutil.Message(update.Message.Chat.ChatID(), "–û—Ç–ª–∏—á–Ω–æ! –ê —Ç–µ–ø–µ—Ä—å –æ–ø–∏—à–∏ –∫–∞–∫–æ–≥–æ –±–æ—Ç–∞ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?")); err != nil {
				return err
			}
		}
	case conversations.OrderStepRequirements:
		if update.Message.Text != "" {
			defer delete(h.states, update.Message.From.ID)
			state.Requirements = update.Message.Text
			if _, err := ctx.Bot().SendMessage(ctx, telegoutil.Message(update.Message.Chat.ChatID(), "–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞—è–≤–∫—É! –Ø –æ—Ç–≤–µ—á—É –Ω–∞ —Å—Ç–æ–ª—å–∫–æ –±—ã—Å—Ç—Ä–æ, –Ω–∞ —Å–∫–æ–ª—å–∫–æ —Å–º–æ–≥—É! üòâ")); err != nil {
				return err
			}
			// send order to owner
			var sb strings.Builder
			sb.WriteString("üõí <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑</b>\n\n")
			fmt.Fprintf(&sb, "üë§ <b>–û—Ç</b>\n\n%s (@%s)\n\n", state.UserName, update.Message.Chat.Username)
			sb.WriteString("üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ</b>\n\n")
			sb.WriteString(state.Requirements)
			if _, err := ctx.Bot().SendMessage(ctx, telegoutil.Message(telegoutil.ID(h.ownerChatID), sb.String()).WithParseMode(telego.ModeHTML)); err != nil {
				return err
			}
		}
	}
	return nil
}
